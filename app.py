import streamlit as st
import pandas as pd
import re
from io import BytesIO

# Configurar la p√°gina de Streamlit
st.set_page_config(page_title="Extractor de Emails", layout="wide")

# T√≠tulo principal
st.title("üìß Extractor de Emails")

# Instrucciones en la barra lateral
with st.sidebar:
    st.header("üõ†Ô∏è Instrucciones")
    st.markdown("""
    1Ô∏è‚É£ **Instala la extensi√≥n Google 100 Results**  
       - [Descargar aqu√≠](https://chromewebstore.google.com/detail/google-100-results-now-yo/bcolekijhplpbjhepfpbighenphmkegl?hl=en)  
       - Esta extensi√≥n permite mostrar hasta 100 resultados en Google, facilitando la b√∫squeda de correos.  

    2Ô∏è‚É£ **Busca en Google lo que te interese.**  
       - Usa palabras clave relacionadas con la profesi√≥n o industria que buscas.  

    3Ô∏è‚É£ **C√≥mo encontrar correos electr√≥nicos y tel√©fonos en LinkedIn**  
       - Usa la siguiente b√∫squeda en Google para encontrar profesionales con correos p√∫blicos de Gmail, Yahoo o Hotmail en un pa√≠s espec√≠fico:  
       ```bash
       site:linkedin.com/in ("@gmail.com" OR "@yahoo.com" OR "@hotmail.com") AND "pa√≠s"
       ```
    4Ô∏è‚É£ **Ejemplo de b√∫squeda para Espa√±a:**  
       ```bash
       site:linkedin.com/in ("@gmail.com" OR "@yahoo.com" OR "@hotmail.com") AND "Espa√±a"
       ```  
       üîé Esto mostrar√° perfiles de LinkedIn en Espa√±a que tienen correos electr√≥nicos p√∫blicos de Gmail, Yahoo o Hotmail.

    5Ô∏è‚É£ **Selecciona todo el contenido de la primera p√°gina de resultados y p√©galo en el cuadro de texto.**

    Luego, presiona el bot√≥n para extraer los correos electr√≥nicos autom√°ticamente.
    """)

# Funci√≥n para extraer emails del texto
def extract_emails(text):
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    return list(set(re.findall(email_pattern, text, re.IGNORECASE)))

# Funci√≥n principal para procesar la entrada del usuario
def main():
    # Entrada de texto del usuario
    user_text = st.text_area("‚úçÔ∏è Pegue aqu√≠ el contenido copiado de los resultados de Google:", height=200)

    if st.button("üîç Extraer Emails"):
        if not user_text.strip():
            st.warning("‚ö†Ô∏è Por favor ingrese texto para analizar.")
        else:
            try:
                # Extraer emails del texto ingresado
                emails = extract_emails(user_text)

                if emails:
                    emails_df = pd.DataFrame({"Email": emails})
                    st.success(f"‚úÖ Se encontraron {len(emails)} correos electr√≥nicos √∫nicos.")

                    # Mostrar todos los resultados sin truncamiento
                    st.dataframe(emails_df, use_container_width=True, height=min(400, len(emails) * 35))

                    # Guardar los emails en un archivo Excel
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='openpyxl') as writer:
                        emails_df.to_excel(writer, index=False, sheet_name='Emails')
                    output.seek(0)

                    # Bot√≥n para descargar el archivo
                    st.download_button(
                        label="‚¨áÔ∏è Descargar como Excel",
                        data=output,
                        file_name="emails_extraidos.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                else:
                    st.warning("‚ùå No se encontraron correos electr√≥nicos en el texto ingresado.")
            except Exception as e:
                st.error(f"‚ö†Ô∏è Ocurri√≥ un error al procesar el texto: {str(e)}")

if __name__ == "__main__":
    main()
