import streamlit as st
import pandas as pd
import re
from io import BytesIO

# Configurar la p√°gina de Streamlit
st.set_page_config(page_title="Extractor de Emails", layout="centered")

# Agregar instrucciones en la barra lateral
st.sidebar.title("Instrucciones")
st.sidebar.write("""
Especifica el dominio de LinkedIn: Usa site:linkedin.com para limitar la b√∫squeda a LinkedIn.

Incluye palabras clave relacionadas con el profesional: Por ejemplo, "CEO", "ingeniero", "dise√±ador", etc.

Agrega los dominios de correo electr√≥nico: Usa @gmail.com, @yahoo.com, o @hotmail.com para filtrar correos espec√≠ficos.

Especifica el pa√≠s: Usa intitle:[pa√≠s] o intext:[pa√≠s] para limitar la b√∫squeda a un pa√≠s en particular.

Busca n√∫meros de tel√©fono: Usa t√©rminos como "tel√©fono", "contacto", o "n√∫mero" para encontrar informaci√≥n de contacto.

Combina los operadores: Usa comillas (" ") para frases exactas y el signo OR para incluir m√∫ltiples opciones.

Ejemplo de b√∫squeda:
Si quieres encontrar correos y tel√©fonos de ingenieros en LinkedIn que tengan cuentas de Gmail, Yahoo o Hotmail en M√©xico, puedes escribir lo siguiente en Google:

site:linkedin.com intitle:"ingeniero" ("@gmail.com" OR "@yahoo.com" OR "@hotmail.com") intext:"M√©xico" ("tel√©fono" OR "contacto")
""")

# Funci√≥n para extraer emails del texto
def extract_emails(text):
 email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
 
 # Extraer y eliminar duplicados
 emails = list(set(re.findall(email_pattern, text, re.IGNORECASE)))
 
 # Crear DataFrame con los emails extra√≠dos
 return pd.DataFrame({"Email": emails}) if emails else pd.DataFrame(columns=["Email"])

# Interfaz de usuario en Streamlit
st.title("üìß Extractor de Emails")

# Entrada de texto del usuario
user_text = st.text_area("Ingrese el texto del cual desea extraer emails:")

if st.button("üîç Extraer Emails"):
 if not user_text.strip():
     st.warning("‚ö†Ô∏è Por favor ingrese texto para analizar.")
 else:
     # Extraer emails del texto ingresado
     emails_df = extract_emails(user_text)
     
     if not emails_df.empty:
         st.success(f"‚úÖ Se encontraron {len(emails_df)} correos electr√≥nicos √∫nicos.")
         st.dataframe(emails_df)

         # Guardar los emails en un archivo Excel
         output = BytesIO()
         with pd.ExcelWriter(output, engine='openpyxl') as writer:
             emails_df.to_excel(writer, index=False, sheet_name='Emails')
         output.seek(0)

         # Bot√≥n para descargar el archivo
         st.download_button(
             label="‚¨áÔ∏è Descargar como Excel",
             data=output,
             file_name="emails_extraidos.xlsx",
             mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
         )
     else:
         st.warning("‚ùå No se encontraron correos electr√≥nicos en el texto ingresado.")
